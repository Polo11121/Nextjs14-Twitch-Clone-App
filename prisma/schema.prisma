datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}


model User {
  id String @id @default(uuid())
  username String @unique
  imageUrl String @db.Text
  externalUserId String @unique
  bio String? @db.Text

  following Follow[] @relation(name:"Following")
  followedBy Follow[] @relation(name:"FollowedBy")

  blockedBy Block[] @relation(name:"BlockedBy")
  blocking Block[] @relation(name:"Blocking")

  stream Stream?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow{
  id String @id @default(uuid())
  followerId String
  followingId String

  follower User @relation(name:"Following", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation(name:"FollowedBy", fields: [followingId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId,followingId])
}

model Block {
  id String @id @default(uuid())
  blockerId String
  blockedId String

  blocker User @relation(name:"Blocking", fields: [blockerId], references: [id], onDelete: Cascade)
  blocked User @relation(name:"BlockedBy", fields: [blockedId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockerId, blockedId])
  @@index([blockerId,blockedId])
}

model Stream {
  id String @id @default(uuid())
  name String @db.Text
  thumbnailUrl String? @db.Text

  ingressId String? @unique
  serverUrl String? @db.Text
  streamKey String? @db.Text

  isLive Boolean @default(false)
  isChatEnabled Boolean @default(true)
  isChatDelayed Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)

  userId String @unique
  user User @relation(fields: [userId], references: [id],onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId,ingressId ])
}